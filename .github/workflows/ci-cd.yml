name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20.10.0'
  UNITY_VERSION: '2023.3.0f1'

jobs:
  # Code Quality and Testing
  quality-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, game-service, ai-research-service, social-service, analytics-service, api-gateway]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Lint code
      run: npm run lint --workspace=backend/services/${{ matrix.service }}

    - name: Format check
      run: npm run format:check

    - name: Run tests
      run: npm run test --workspace=backend/services/${{ matrix.service }}

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: backend/services/${{ matrix.service }}/coverage/lcov.info
        flags: ${{ matrix.service }}

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Backend Build and Test
  backend-build:
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Build backend services
      run: npm run build

    - name: Run integration tests
      run: npm run test:integration
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-build
        path: backend/services/*/dist

  # Unity Client Build (iOS)
  unity-ios-build:
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Unity Library
      uses: actions/cache@v3
      with:
        path: client/unity-project/Library
        key: Library-${{ hashFiles('client/unity-project/Assets/**', 'client/unity-project/Packages/**', 'client/unity-project/ProjectSettings/**') }}
        restore-keys: |
          Library-

    - name: Setup Unity
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        projectPath: client/unity-project
        targetPlatform: iOS
        buildName: ThinkRank-iOS

    - name: Upload iOS Build
      uses: actions/upload-artifact@v3
      with:
        name: ios-build
        path: build/iOS

  # Unity Client Build (Android)
  unity-android-build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Unity Library
      uses: actions/cache@v3
      with:
        path: client/unity-project/Library
        key: Library-${{ hashFiles('client/unity-project/Assets/**', 'client/unity-project/Packages/**', 'client/unity-project/ProjectSettings/**') }}
        restore-keys: |
          Library-

    - name: Setup Unity
      uses: game-ci/unity-builder@v4
      env:
        UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      with:
        projectPath: client/unity-project
        targetPlatform: Android
        buildName: ThinkRank-Android

    - name: Upload Android Build
      uses: actions/upload-artifact@v3
      with:
        name: android-build
        path: build/Android

  # Docker Build and Push
  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    strategy:
      matrix:
        service: [auth-service, game-service, ai-research-service, social-service, analytics-service, api-gateway]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: thinkrank-${{ matrix.service }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG backend/services/${{ matrix.service }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  # Infrastructure Validation
  terraform-validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Format Check
      run: terraform fmt -check -recursive infrastructure/terraform/

    - name: Terraform Init
      run: |
        cd infrastructure/terraform
        terraform init

    - name: Terraform Validate
      run: |
        cd infrastructure/terraform
        terraform validate

    - name: Terraform Plan
      run: |
        cd infrastructure/terraform
        terraform plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # Deployment to Development
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [docker-build, terraform-validate]
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to EKS Development
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name thinkrank-dev
        kubectl apply -k infrastructure/kubernetes/overlays/dev

  # Deployment to Production
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [docker-build, terraform-validate]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to EKS Production
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name thinkrank-prod
        kubectl apply -k infrastructure/kubernetes/overlays/production

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Performance Tests
      run: npm run test:performance
      env:
        TEST_URL: https://dev-api.thinkrank.com

    - name: Upload Performance Report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-results/
