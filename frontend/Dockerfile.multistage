# Multi-stage Dockerfile for Frontend - React/Vite Application
ARG NODE_VERSION=20.10.0
ARG NGINX_VERSION=1.25-alpine

# Stage 1: Base image with security updates
FROM node:${NODE_VERSION}-alpine AS base
RUN apk update && apk upgrade && apk add --no-cache \
    ca-certificates \
    && rm -rf /var/cache/apk/*

# Stage 2: Dependencies installation
FROM base AS deps
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY frontend/package*.json ./frontend/

# Install dependencies with security audit
RUN npm ci --audit --audit-level moderate && \
    npm cache clean --force

# Stage 3: Build stage
FROM base AS builder
WORKDIR /app

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/frontend/node_modules ./frontend/node_modules

# Copy source code
COPY frontend/ ./frontend/
COPY package*.json ./

# Build arguments for environment-specific builds
ARG BUILD_ENV=production
ARG API_URL=https://api.thinkrank.com
ARG APP_VERSION=1.0.0

# Set build environment variables
ENV NODE_ENV=production
ENV VITE_API_URL=$API_URL
ENV VITE_APP_VERSION=$APP_VERSION
ENV VITE_BUILD_ENV=$BUILD_ENV

# Build the application
RUN npm run build --workspace=frontend

# Stage 4: Security scanning
FROM aquasec/trivy:latest AS security
WORKDIR /scan
COPY --from=builder /app/frontend/dist ./
RUN trivy fs --exit-code 0 --severity HIGH,CRITICAL --no-progress .

# Stage 5: Nginx runtime stage
FROM nginx:${NGINX_VERSION} AS runtime

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache \
    curl \
    && rm -rf /var/cache/apk/*

# Remove default nginx content
RUN rm -rf /usr/share/nginx/html/*

# Copy built application
COPY --from=builder /app/frontend/dist /usr/share/nginx/html

# Copy custom nginx configuration
COPY frontend/nginx.conf /etc/nginx/nginx.conf
COPY frontend/nginx-default.conf /etc/nginx/conf.d/default.conf

# Create nginx user if it doesn't exist
RUN addgroup -g 101 -S nginx || true && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx nginx || true

# Security hardening
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx && \
    chown -R nginx:nginx /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nginx /var/run/nginx.pid

# Create non-root user for nginx
RUN sed -i 's/user nginx;/user nginx;/' /etc/nginx/nginx.conf

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

# Security headers and optimized nginx config
COPY <<EOF /etc/nginx/conf.d/security.conf
# Security headers
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "no-referrer-when-downgrade" always;
add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:; img-src 'self' data: https:; font-src 'self' https:; connect-src 'self' https: wss:; media-src 'self' https:; object-src 'none'; child-src 'none'; frame-ancestors 'none'; form-action 'self'; base-uri 'self';" always;
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

# Performance optimizations
gzip on;
gzip_vary on;
gzip_min_length 10240;
gzip_proxied expired no-cache no-store private must-revalidate auth;
gzip_types
    application/javascript
    application/json
    application/xml
    text/css
    text/javascript
    text/plain
    text/xml;

# Caching for static assets
location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    access_log off;
}

# Disable server tokens
server_tokens off;
EOF

# Switch to non-root user
USER nginx

# Expose port
EXPOSE 80

# Labels for metadata
LABEL maintainer="ThinkRank Team <dev@thinkrank.com>" \
      version="1.0.0" \
      description="ThinkRank Frontend Application" \
      org.opencontainers.image.source="https://github.com/thinkrank/thinkrank" \
      org.opencontainers.image.licenses="MIT" \
      org.opencontainers.image.version="1.0.0"

# Start nginx
CMD ["nginx", "-g", "daemon off;"]