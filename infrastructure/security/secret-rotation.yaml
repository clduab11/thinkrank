# External Secrets Operator with Automated Secret Rotation
apiVersion: v1
kind: Namespace
metadata:
  name: external-secrets
  labels:
    name: external-secrets

---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: external-secrets-operator
  namespace: argocd
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  source:
    repoURL: https://charts.external-secrets.io
    chart: external-secrets
    targetRevision: 0.9.11
    helm:
      values: |
        installCRDs: true
        replicaCount: 2
        
        image:
          repository: ghcr.io/external-secrets/external-secrets
          tag: v0.9.11
          
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
            
        serviceMonitor:
          enabled: true
          
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          
        podSecurityContext:
          fsGroup: 65534
          
        webhook:
          create: true
          port: 10250
          
        certController:
          create: true
          requeueInterval: 5m
          
  destination:
    server: https://kubernetes.default.svc
    namespace: external-secrets
    
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true

---
# AWS Secrets Manager SecretStore
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: thinkrank
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      role: arn:aws:iam::ACCOUNT_ID:role/thinkrank-external-secrets-role
      auth:
        jwt:
          serviceAccountRef:
            name: external-secrets-sa

---
# HashiCorp Vault SecretStore (Alternative)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: thinkrank
spec:
  provider:
    vault:
      server: "https://vault.thinkrank.com"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "thinkrank-role"
          serviceAccountRef:
            name: external-secrets-sa

---
# External Secret for Database Credentials with Rotation
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-credentials
  namespace: thinkrank
  annotations:
    reloader.stakater.com/match: "true"
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: database-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        annotations:
          reloader.stakater.com/match: "true"
          secret-rotation.thinkrank.com/last-rotated: "{{ now | date \"2006-01-02T15:04:05Z07:00\" }}"
      data:
        DATABASE_URL: "postgresql://{{ .username }}:{{ .password }}@postgres.thinkrank.svc.cluster.local:5432/thinkrank"
        DATABASE_USERNAME: "{{ .username }}"
        DATABASE_PASSWORD: "{{ .password }}"
        DATABASE_ROOT_PASSWORD: "{{ .root_password }}"
  data:
  - secretKey: username
    remoteRef:
      key: thinkrank/database/primary
      property: username
  - secretKey: password
    remoteRef:
      key: thinkrank/database/primary
      property: password
  - secretKey: root_password
    remoteRef:
      key: thinkrank/database/primary
      property: root_password

---
# External Secret for JWT Secrets with Rotation
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: jwt-secrets
  namespace: thinkrank
spec:
  refreshInterval: 24h  # Rotate daily
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: jwt-secrets
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        annotations:
          secret-rotation.thinkrank.com/last-rotated: "{{ now | date \"2006-01-02T15:04:05Z07:00\" }}"
      data:
        JWT_SECRET: "{{ .secret }}"
        JWT_REFRESH_SECRET: "{{ .refresh_secret }}"
        JWT_ALGORITHM: "HS256"
        JWT_EXPIRY: "1h"
        JWT_REFRESH_EXPIRY: "7d"
  data:
  - secretKey: secret
    remoteRef:
      key: thinkrank/jwt/primary
      property: secret
  - secretKey: refresh_secret
    remoteRef:
      key: thinkrank/jwt/primary
      property: refresh_secret

---
# External Secret for AI API Keys with Rotation
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ai-api-keys
  namespace: thinkrank
spec:
  refreshInterval: 7d  # Rotate weekly
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: ai-api-keys
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        annotations:
          secret-rotation.thinkrank.com/last-rotated: "{{ now | date \"2006-01-02T15:04:05Z07:00\" }}"
  data:
  - secretKey: OPENAI_API_KEY
    remoteRef:
      key: thinkrank/openai/primary
      property: api_key
  - secretKey: ANTHROPIC_API_KEY
    remoteRef:
      key: thinkrank/anthropic/primary
      property: api_key
  - secretKey: OPENAI_ORG_ID
    remoteRef:
      key: thinkrank/openai/primary
      property: org_id

---
# External Secret for Supabase Credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: supabase-credentials
  namespace: thinkrank
spec:
  refreshInterval: 12h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: supabase-credentials
    creationPolicy: Owner
  data:
  - secretKey: SUPABASE_URL
    remoteRef:
      key: thinkrank/supabase/primary
      property: url
  - secretKey: SUPABASE_ANON_KEY
    remoteRef:
      key: thinkrank/supabase/primary
      property: anon_key
  - secretKey: SUPABASE_SERVICE_KEY
    remoteRef:
      key: thinkrank/supabase/primary
      property: service_key

---
# Service Account for External Secrets
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: thinkrank
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/thinkrank-external-secrets-role

---
# CronJob for Secret Rotation Monitoring
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation-monitor
  namespace: thinkrank
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: secret-rotation-monitor
          containers:
          - name: rotation-checker
            image: curlimages/curl:8.4.0
            command:
            - /bin/sh
            - -c
            - |
              # Check secret ages and trigger rotation if needed
              kubectl get secrets -n thinkrank -o json | \
              jq -r '.items[] | select(.metadata.annotations["secret-rotation.thinkrank.com/last-rotated"]) | 
                     .metadata.name + " " + .metadata.annotations["secret-rotation.thinkrank.com/last-rotated"]' | \
              while read secret_name last_rotated; do
                # Calculate age and trigger rotation if older than threshold
                age_days=$(( ($(date +%s) - $(date -d "$last_rotated" +%s)) / 86400 ))
                case "$secret_name" in
                  "database-credentials")
                    if [ $age_days -gt 30 ]; then
                      echo "Triggering rotation for $secret_name (age: $age_days days)"
                      kubectl annotate externalsecret database-credentials -n thinkrank \
                        force-sync="$(date +%s)" --overwrite
                    fi
                    ;;
                  "jwt-secrets")
                    if [ $age_days -gt 1 ]; then
                      echo "Triggering rotation for $secret_name (age: $age_days days)"
                      kubectl annotate externalsecret jwt-secrets -n thinkrank \
                        force-sync="$(date +%s)" --overwrite
                    fi
                    ;;
                  "ai-api-keys")
                    if [ $age_days -gt 7 ]; then
                      echo "Triggering rotation for $secret_name (age: $age_days days)"
                      kubectl annotate externalsecret ai-api-keys -n thinkrank \
                        force-sync="$(date +%s)" --overwrite
                    fi
                    ;;
                esac
              done
            env:
            - name: KUBECTL_VERSION
              value: "v1.28.0"
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            fsGroup: 1000

---
# Service Account for Secret Rotation Monitor
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-rotation-monitor
  namespace: thinkrank

---
# RBAC for Secret Rotation Monitor
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-rotation-monitor
  namespace: thinkrank
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["external-secrets.io"]
  resources: ["externalsecrets"]
  verbs: ["get", "list", "patch", "update"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-rotation-monitor
  namespace: thinkrank
subjects:
- kind: ServiceAccount
  name: secret-rotation-monitor
  namespace: thinkrank
roleRef:
  kind: Role
  name: secret-rotation-monitor
  apiGroup: rbac.authorization.k8s.io

---
# Reloader for automatic pod restart on secret changes
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: reloader
  namespace: argocd
spec:
  project: default
  source:
    repoURL: https://stakater.github.io/stakater-charts
    chart: reloader
    targetRevision: 1.0.69
    helm:
      values: |
        reloader:
          watchGlobally: false
          namespaceSelector: "name in (thinkrank)"
          
        deployment:
          resources:
            requests:
              memory: 128Mi
              cpu: 100m
            limits:
              memory: 512Mi
              cpu: 500m
              
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            
        podSecurityContext:
          fsGroup: 65534
          
        serviceMonitor:
          enabled: true
          
  destination:
    server: https://kubernetes.default.svc
    namespace: reloader
    
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true

---
# Notification configuration for secret rotation events
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-rotation-notifications
  namespace: thinkrank
data:
  notify.sh: |
    #!/bin/bash
    SECRET_NAME=$1
    EVENT_TYPE=$2
    TIMESTAMP=$(date -Iseconds)
    
    # Slack notification
    if [ -n "$SLACK_WEBHOOK_URL" ]; then
      curl -X POST -H 'Content-type: application/json' \
        --data "{
          \"text\": \":key: Secret Rotation Event\",
          \"attachments\": [{
            \"color\": \"$( [ \"$EVENT_TYPE\" = \"success\" ] && echo \"good\" || echo \"danger\" )\",
            \"fields\": [
              {\"title\": \"Secret\", \"value\": \"$SECRET_NAME\", \"short\": true},
              {\"title\": \"Event\", \"value\": \"$EVENT_TYPE\", \"short\": true},
              {\"title\": \"Timestamp\", \"value\": \"$TIMESTAMP\", \"short\": true}
            ]
          }]
        }" \
        $SLACK_WEBHOOK_URL
    fi
    
    # PagerDuty notification for failures
    if [ "$EVENT_TYPE" = "failure" ] && [ -n "$PAGERDUTY_API_KEY" ]; then
      curl -X POST \
        -H "Authorization: Token token=$PAGERDUTY_API_KEY" \
        -H "Content-Type: application/json" \
        -d "{
          \"incident\": {
            \"type\": \"incident\",
            \"title\": \"Secret Rotation Failed: $SECRET_NAME\",
            \"service\": {
              \"id\": \"$PAGERDUTY_SERVICE_ID\",
              \"type\": \"service_reference\"
            },
            \"body\": {
              \"type\": \"incident_body\",
              \"details\": \"Secret rotation failed for $SECRET_NAME at $TIMESTAMP\"
            }
          }
        }" \
        https://api.pagerduty.com/incidents