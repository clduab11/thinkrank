# Redis with encryption at rest and in transit
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: thinkrank
data:
  redis.conf: |
    # Basic Redis configuration with security hardening
    bind 0.0.0.0
    port 6379
    
    # Enable TLS
    tls-port 6380
    tls-cert-file /tls/redis.crt
    tls-key-file /tls/redis.key
    tls-ca-cert-file /tls/ca.crt
    tls-protocols "TLSv1.2 TLSv1.3"
    tls-ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256
    tls-ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256
    tls-prefer-server-ciphers yes
    
    # Authentication
    requirepass REDIS_PASSWORD_PLACEHOLDER
    
    # Persistence with encryption
    save 900 1
    save 300 10
    save 60 10000
    
    # AOF for better durability
    appendonly yes
    appendfsync everysec
    
    # Security settings
    protected-mode yes
    tcp-keepalive 300
    timeout 0
    
    # Disable dangerous commands
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    rename-command DEBUG ""
    rename-command CONFIG "CONFIG_b835r2f4n8q3"
    rename-command SHUTDOWN "SHUTDOWN_a729b4f8n2q1"
    rename-command EVAL ""
    rename-command SCRIPT ""
    
    # Memory management
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    
    # Logging
    loglevel notice
    logfile ""
    syslog-enabled yes
    syslog-ident redis
    
    # Client output buffer limits
    client-output-buffer-limit normal 0 0 0
    client-output-buffer-limit replica 256mb 64mb 60
    client-output-buffer-limit pubsub 32mb 8mb 60
    
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-tls-certs
  namespace: thinkrank
type: kubernetes.io/tls
data:
  # These will be generated by cert-manager or provided via external secrets
  tls.crt: LS0tLS1CRUdJTi... # Base64 encoded certificate
  tls.key: LS0tLS1CRUdJTi... # Base64 encoded private key
  ca.crt: LS0tLS1CRUdJTi...  # Base64 encoded CA certificate
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-encrypted
  namespace: thinkrank
spec:
  serviceName: redis-encrypted
  replicas: 1
  selector:
    matchLabels:
      app: redis-encrypted
  template:
    metadata:
      labels:
        app: redis-encrypted
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      initContainers:
      - name: config-setup
        image: redis:7-alpine
        command:
        - /bin/sh
        - -c
        - |
          cp /config-template/redis.conf /config/redis.conf
          sed -i "s/REDIS_PASSWORD_PLACEHOLDER/$REDIS_PASSWORD/g" /config/redis.conf
          chmod 644 /config/redis.conf
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: config-template
          mountPath: /config-template
        - name: config
          mountPath: /config
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
          name: redis
        - containerPort: 6380
          name: redis-tls
        command:
        - redis-server
        - /config/redis.conf
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: REDIS_PASSWORD
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        - name: config
          mountPath: /config
        - name: tls-certs
          mountPath: /tls
          readOnly: true
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --tls
            - --cert
            - /tls/tls.crt
            - --key
            - /tls/tls.key
            - --cacert
            - /tls/ca.crt
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --tls
            - --cert
            - /tls/tls.crt
            - --key
            - /tls/tls.key
            - --cacert
            - /tls/ca.crt
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        ports:
        - containerPort: 9121
        env:
        - name: REDIS_ADDR
          value: "rediss://localhost:6380"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-secrets
              key: REDIS_PASSWORD
        - name: REDIS_EXPORTER_TLS_CLIENT_CERT_FILE
          value: "/tls/tls.crt"
        - name: REDIS_EXPORTER_TLS_CLIENT_KEY_FILE
          value: "/tls/tls.key"
        - name: REDIS_EXPORTER_TLS_CA_CERT_FILE
          value: "/tls/ca.crt"
        volumeMounts:
        - name: tls-certs
          mountPath: /tls
          readOnly: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-encrypted-pvc
      - name: config-template
        configMap:
          name: redis-config
      - name: config
        emptyDir: {}
      - name: tls-certs
        secret:
          secretName: redis-tls-certs
  volumeClaimTemplates:
  - metadata:
      name: redis-encrypted-pvc
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: encrypted-ssd
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redis-encrypted
  namespace: thinkrank
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:ACCOUNT:certificate/CERT-ID
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "6380"
spec:
  selector:
    app: redis-encrypted
  ports:
  - port: 6379
    targetPort: 6379
    name: redis
  - port: 6380
    targetPort: 6380
    name: redis-tls
  - port: 9121
    targetPort: 9121
    name: metrics
  type: ClusterIP
---
# Network policy for Redis security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-network-policy
  namespace: thinkrank
spec:
  podSelector:
    matchLabels:
      app: redis-encrypted
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: auth-service
    - podSelector:
        matchLabels:
          app: game-service
    - podSelector:
        matchLabels:
          app: social-service
    - podSelector:
        matchLabels:
          app: realtime-service
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 6380
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9121
  egress:
  - {} # Allow all outbound traffic