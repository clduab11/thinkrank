# Blue-Green Deployment Configuration for ThinkRank Security Integration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service-blue
  namespace: thinkrank
  labels:
    app: auth-service
    version: v2.0.0-secure
    deployment: blue
    component: security-critical
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: auth-service
      deployment: blue
  template:
    metadata:
      labels:
        app: auth-service
        deployment: blue
        version: v2.0.0-secure
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: auth-service
        image: thinkrank/auth-service:v2.0.0-secure-blue
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 3001
        env:
        - name: DEPLOYMENT_COLOR
          value: "blue"
        - name: NODE_ENV
          value: "production"
        - name: JWT_ALGORITHM
          value: "RS256"
        # Database and Redis connections
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: thinkrank-database-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: thinkrank-redis-secrets
              key: REDIS_URL
        livenessProbe:
          httpGet:
            path: /health/live
            port: 3001
            scheme: HTTPS
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 3001
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service-green
  namespace: thinkrank
  labels:
    app: auth-service
    version: v2.0.0-secure
    deployment: green
    component: security-critical
spec:
  replicas: 0  # Start with 0 replicas
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: auth-service
      deployment: green
  template:
    metadata:
      labels:
        app: auth-service
        deployment: green
        version: v2.0.0-secure
    spec:
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: auth-service
        image: thinkrank/auth-service:v2.0.0-secure-green
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 3001
        env:
        - name: DEPLOYMENT_COLOR
          value: "green"
        - name: NODE_ENV
          value: "production"
        - name: JWT_ALGORITHM
          value: "RS256"
        # Database and Redis connections
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: thinkrank-database-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: thinkrank-redis-secrets
              key: REDIS_URL
        livenessProbe:
          httpGet:
            path: /health/live
            port: 3001
            scheme: HTTPS
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 3001
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
---
# Blue Service
apiVersion: v1
kind: Service
metadata:
  name: auth-service-blue
  namespace: thinkrank
  labels:
    app: auth-service
    deployment: blue
spec:
  selector:
    app: auth-service
    deployment: blue
  ports:
  - name: https
    port: 443
    targetPort: 3001
    protocol: TCP
  type: ClusterIP
---
# Green Service
apiVersion: v1
kind: Service
metadata:
  name: auth-service-green
  namespace: thinkrank
  labels:
    app: auth-service
    deployment: green
spec:
  selector:
    app: auth-service
    deployment: green
  ports:
  - name: https
    port: 443
    targetPort: 3001
    protocol: TCP
  type: ClusterIP
---
# Load Balancer Service (routes to active deployment)
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: thinkrank
  labels:
    app: auth-service
    component: load-balancer
spec:
  selector:
    app: auth-service
    deployment: blue  # Initially routes to blue
  ports:
  - name: https
    port: 443
    targetPort: 3001
    protocol: TCP
  type: ClusterIP
---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: auth-service-ingress
  namespace: thinkrank
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - auth.thinkrank.com
    secretName: auth-service-tls
  rules:
  - host: auth.thinkrank.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 443
---
# Deployment Manager Job
apiVersion: batch/v1
kind: Job
metadata:
  name: deployment-manager
  namespace: thinkrank
  labels:
    app: deployment-manager
spec:
  template:
    spec:
      containers:
      - name: deployment-manager
        image: thinkrank/deployment-manager:latest
        env:
        - name: NAMESPACE
          value: "thinkrank"
        - name: SERVICE_NAME
          value: "auth-service"
        - name: BLUE_DEPLOYMENT
          value: "auth-service-blue"
        - name: GREEN_DEPLOYMENT
          value: "auth-service-green"
        - name: LOAD_BALANCER_SERVICE
          value: "auth-service"
        - name: HEALTH_CHECK_URL
          value: "https://auth.thinkrank.com/health/ready"
        - name: ROLLBACK_ON_FAILURE
          value: "true"
        - name: VALIDATION_TIMEOUT
          value: "300"  # 5 minutes
      restartPolicy: Never
  backoffLimit: 3
---
# Monitoring and Alerting
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: auth-service-blue-monitor
  namespace: thinkrank
spec:
  selector:
    matchLabels:
      app: auth-service
      deployment: blue
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: auth-service-green-monitor
  namespace: thinkrank
  labels:
    app: auth-service
    deployment: green
spec:
  selector:
    matchLabels:
      app: auth-service
      deployment: green
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
---
# Network Policies
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: auth-service-blue-green-policy
  namespace: thinkrank
spec:
  podSelector:
    matchLabels:
      app: auth-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: thinkrank
    - podSelector:
        matchLabels:
          app: api-gateway
    ports:
    - protocol: TCP
      port: 3001
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres-encrypted
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis-encrypted
    ports:
    - protocol: TCP
      port: 6379
---
# ConfigMap for deployment configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: deployment-config
  namespace: thinkrank
data:
  BLUE_GREEN_ENABLED: "true"
  HEALTH_CHECK_RETRIES: "3"
  HEALTH_CHECK_INTERVAL: "30"
  DEPLOYMENT_TIMEOUT: "600"
  ROLLBACK_ENABLED: "true"
  TRAFFIC_SHIFT_ENABLED: "true"
  CANARY_DEPLOYMENT: "false"
  GRADUAL_TRAFFIC_SHIFT: "true"
  TRAFFIC_SHIFT_PERCENTAGE: "10"