apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service-secure
  namespace: thinkrank
  labels:
    app: auth-service
    version: v2.0.0-secure
    component: security-critical
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: auth-service
      version: v2.0.0-secure
  template:
    metadata:
      labels:
        app: auth-service
        version: v2.0.0-secure
        component: security-critical
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
    spec:
      # Enhanced security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: auth-service
        image: thinkrank/auth-service:v2.0.0-secure
        imagePullPolicy: Always
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
          volumeMounts:
          - name: tmp-volume
            mountPath: /tmp
            readOnly: false
        ports:
        - containerPort: 3001
          name: http
          protocol: TCP
        env:
        # Security-critical environment variables
        - name: NODE_ENV
          value: "production"
        - name: JWT_ALGORITHM
          value: "RS256"
        - name: JWT_ACCESS_TOKEN_EXPIRES_IN
          value: "15m"
        - name: JWT_REFRESH_TOKEN_EXPIRES_IN
          value: "7d"
        - name: BCRYPT_SALT_ROUNDS
          value: "12"
        - name: RATE_LIMIT_WINDOW_MS
          value: "900000"  # 15 minutes
        - name: RATE_LIMIT_MAX_REQUESTS
          value: "100"
        - name: ENABLE_2FA
          value: "true"
        - name: DATABASE_ENCRYPTION_ENABLED
          value: "true"
        - name: AUDIT_LOG_ENABLED
          value: "true"
        - name: SECURE_HEADERS_ENABLED
          value: "true"
        # Database configuration
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: thinkrank-database-secrets
              key: DATABASE_URL
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: thinkrank-database-secrets
              key: DATABASE_PASSWORD
        # Redis configuration for rate limiting
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: thinkrank-redis-secrets
              key: REDIS_URL
        # JWT Keys - Rotated regularly
        - name: JWT_PRIVATE_KEY
          valueFrom:
            secretKeyRef:
              name: thinkrank-jwt-secrets
              key: JWT_PRIVATE_KEY
        - name: JWT_PUBLIC_KEY
          valueFrom:
            secretKeyRef:
              name: thinkrank-jwt-secrets
              key: JWT_PUBLIC_KEY
        # Feature flags
        - name: FEATURE_MFA_REQUIRED
          value: "false"  # Gradual rollout
        - name: FEATURE_ENCRYPTED_SESSIONS
          value: "true"
        - name: FEATURE_SECURITY_AUDIT_LOG
          value: "true"
        # Performance optimization
        - name: MAX_CONNECTIONS
          value: "20"
        - name: IDLE_TIMEOUT
          value: "300000"  # 5 minutes
        livenessProbe:
          httpGet:
            path: /health/live
            port: 3001
            scheme: HTTPS
            httpHeaders:
            - name: Authorization
              value: "Bearer internal-health-check"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 3001
            scheme: HTTPS
            httpHeaders:
            - name: Authorization
              value: "Bearer internal-health-check"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health/startup
            port: 3001
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "100Mi"
          limits:
            memory: "1Gi"
            cpu: "1000m"
            ephemeral-storage: "500Mi"
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
      # Init container for security setup
      initContainers:
      - name: security-init
        image: alpine:3.18
        command:
        - sh
        - -c
        - |
          # Create non-root user if it doesn't exist
          if ! id -u 1001 > /dev/null 2>&1; then
            adduser -D -s /bin/sh -u 1001 -G root appuser
          fi
          # Set proper permissions
          chown -R 1001:1001 /app
          chmod -R 755 /app
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
      volumes:
      - name: tmp-volume
        emptyDir:
          sizeLimit: 100Mi
      - name: cache-volume
        emptyDir:
          sizeLimit: 50Mi
      # Pod security standards
      automountServiceAccountToken: false
      enableServiceLinks: false
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service-secure
  namespace: thinkrank
  labels:
    app: auth-service
    version: v2.0.0-secure
spec:
  selector:
    app: auth-service
    version: v2.0.0-secure
  ports:
  - name: https
    port: 443
    targetPort: 3001
    protocol: TCP
  type: ClusterIP
---
# Network policy for enhanced security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: auth-service-secure-policy
  namespace: thinkrank
spec:
  podSelector:
    matchLabels:
      app: auth-service
      version: v2.0.0-secure
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: thinkrank
    - podSelector:
        matchLabels:
          app: api-gateway
    ports:
    - protocol: TCP
      port: 3001
  - from: []  # Deny all other ingress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres-encrypted
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis-encrypted
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Deny all other egress
---
# Service monitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: auth-service-monitor
  namespace: thinkrank
  labels:
    app: auth-service
spec:
  selector:
    matchLabels:
      app: auth-service
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
    honorLabels: true
    metricRelabelings:
    - sourceLabels: [__name__]
      regex: 'auth_service_.+'
      action: keep
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: auth-service-hpa
  namespace: thinkrank
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: auth-service-secure
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60